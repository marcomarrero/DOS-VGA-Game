ÄÄÄÄÄÄÄÄÄ
  GAME
ÄÄÄÄÄÄÄÄÄ
 Game Manager v1.10 - Documentation/Information/Etc.
 Copyright (c) 1995 Marco A. Marrero.

ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
   Introduction
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
  This unit performs the special magic to get almost total control on
the PC hardware. It has it own interrupt and keyboard handler, and can
perform very low-level operations. It also has some text routines (using
the BIOS) so you can avoid using <stdio.h>, <conio.h> and crt.tpu.


ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
     Startup
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
  GAME starts automatically *before* your main program. That enables it
to do several nice things before you get control. It does:

	ş Checks if it is a 386 computer. It will halt if not detected.
	ş Checks if you have a VGA/SVGA adapter. Will halt if not found.
	ş Will check if you have filled its data segment. (TP7 bug??)
	ş Store current video mode in global variable _lastmode.
	ş Get control of the keyboard and timer vector
	ş Turn off the keyboard leds


  GAME will automatically restores everything back to normal, except
memory if you use malloc. TP7 users should not worry about that. You
can stop... Booooring....

  Al comenzar a ejecutar, GAME toma control del teclado (INT 9), y del timer
(INT 8). Adem s lee en que modo (gr fico/texto) est  y lo guarda en
_lastmode. Asi que si el programa sale sin errores, deberia salir usando
"mode(_lastmode)" y luego "halt(0)" o "halt". Si sales con "halt(>0)", GAME
va a llamar "mode(_lastmode)" (y borra todita la pantalla).

  El manejador del teclado pone el valor de las teclas en "_readkey". Y el
arreglo "keyboard[n]" tiene una tabla de teclas oprimidas (1) y no oprimidas
(0) de acuerdo al scan code. Por ejemplo, si "keyboard[_esc]" es 1, esta
apretada. Casi todas las teclas est n definidas con "_" antes de letra
o funci¢n. (hay una tabla al final).

  El manejador del teclado pone los valores en las variables todo el tiempo.
Llamar cualquier funci¢n del teclado (como READLN) es una estupidez y no
va a funcionar. Tampoco hace caso de "numlock", "capslock" y esas
sanganaces. Por eso se apagan todas al comenzar.

  El manejador del tiempo (timer) tiene un "reloj", que son "timerw"
y "frame". Estas son incrementadas cada ves que ocurre un
"timer interrupt" y por lo general es 18.2 veces por segundo. Tu puedes
cambiar la frecuencia del reloj del "timer", con "TIMER_TICK(n)".

  Para detener un programa se oprime [Alt]+[SysRq]. Esto genera un error 255.
Funciona en *todo* momento a menos que se estrelle el hardware o se apague
el interrupt del teclado. Windows uses this combination for something else,
so it won't work on Windows unless you set up the .PIF to avoid Windows
to undeliver that keypress. (Remember that Windows simulates hardware).

  Es recomendable en un 100% usar QEMM ya que reporta los errores en lugar
de estrellar la computadora por relajar. Como sea, lo #1 es grabar todo el
tiempo y para c¢digo chav¢n mejor hacer que SMARTDRV no haga "delayed"
writes.

  Por favor, NO uses CRT ni GRAPH! Esto puede causar *serias*
icompatibilidades y cosas feas. GAME.TPU tiene funciones b sicas para el
manejo de texto.



ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
 Manejo de Errores
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
 Un error ocurre cuando una llamada al sistema de Pascal falla, se oprime
[Alt]+[SysRq] o se utiliza "HALT(n)" en que "n" es mayor a cero. (cero
indica que no hubo error)

 La variable "_errormsg" contiene un string con el mensaje que vas
a ponerle al usuario.

 El error #255 est  reservado para el error cuando se oprime [Alt]+[SysRq],
porque autom ticamente _errormsg contiene que detuvieron el programa.


 Cuando ocurre un error, el sistema hace lo siguiente:
	ş Repone el modo gr fico en que estaba al comenzar (...text)
	ş Escribe un mensaje de error
	ş Repone la frecuencia de el timer a 18.2 por segundo
	ş Los vectores de interrupt 8,9 y 16h (emula el BIOS, pero mal)
	ş Permite los "Interrupts" de nuevo
	ş Activa los "leds" del teclado (como estaban)
	ş Desplega valores de registros.
	ş Blah, blah.

 Si utilizas alguna otra cosa que requiera que se desinstale, NO va a
trabajar bien con GAME. Un ejemplo son las funciones de GUS.


ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ  FUNCIONES  ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 BIOSGOTOXY(x,y:byte)

   Mueve el cursor a donde te de la gana. En la pantalla 320x200 el cursor
   va de (1,1) a (40,25). Obviamente en modo gr fico el cursor NO se ve.
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 BIOSCLS(color:byte)

   Clears the screen. Works on screens up to 80x50.
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 BYTE=BIOSWHEREX()

   Regresa posici¢n del cursor en x. Aunque no se vea.
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 BYTE=BIOSWHEREY

   Regresa la posici¢n del cursor en y. Aunque no se vea.
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 BIOSTYPE(txt:string; color:byte)

   Escribe en la pantalla el texto. Es lento a nivel de abuso.
   No se porque rayos, pero la basura de BIOS no cambia el color si
   la pantalla es de texto. Oh, bien... Abajo el BIOS, arriba programar
   todo a rajatabla!
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 NUMX(val:string; value:word)

   Convierte el valor a un string. La variable "_base" tiene la base a
   usar (2=binario, 8=octal, 10=decimal y 16=hexadecimal). NO pone los
   ceros que preceden. (3 binario = 111, no 000000000000111).

   Ahora se llama "numx" porque antes cuando era "num", una funci¢n
   compilaba lo mas feliz y en otra  no compilaba ni a palos. Solo lo
   cambi‚ a "numx" y compila sin problemas... Como que pascal tiene
   horrores bien feos por ah¡...
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 NUMHEX(val:string; value:word)

   Convierte el valor a string, en hexadecimal y con los ceros faltantes.
   No modifica valor de variable "_base".
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 ECHONUM(num:word, color:word)

   Escribe un numero hexadecimal en la pantalla usando el espantoso BIOS.
   El color NO funiona en la pantalla de texto, culpa de los idiotas que
   programaron el BIOS.

ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 BYTE=WHICH_VIDEO()

   Devuelve en que modo de video est  la tarjeta de gr ficas. Hay unas
   cuantas constantes pero imagino que la que importa es "VGAMONO" y
   "VGACOLOR" (6,7).

   GAME vomita si la tarjeta no es VGA, asi que esta funci¢n solo sirve
   para saber si el usuario ve colores o grises en su VGA.
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 WORD=JOYSTICK(cual:byte)

   Devuelve el valor de la palanca. Los valores de "cual" son:
	1 : Posici¢n de x, palanca 1
	2 : Posici¢n de y, palanca 1

	3 : Posici¢n de x, palanca 2
	4 : Posici¢n de y, palanca 2

   Ya que esta rutina es algo "util", porque los joysticks son est£pidos,
   desconfiables y malos. Es posible que la PC se quede en un hermoso loop
   infinito si no hay un joystick, o el motherboard no tiene uno.
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 BYTE=BUTTON()

   Devuelve el estado de los botones. No ha sido probado y puede cambiar
   el formato en el futuro.
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 BYTE=PEEKB(addr:pointer,adder:word)

   Devuelve un byte de el pointer + offset. Es para uso temporero ya que
   es lento, est£pido y absurdo. Es bueno para cosas que no requieran
   velocidad, y no quieras pelear con conversiones de pointers.
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 WORD=PEEKW(addr:pointer,adder:word)

   Devuelve un word de el pointer + offset. Es para uso temporero ya que
   es lento. Quizas se parezca a QBASIC/QB pero no necesita la basura
   de DEFSEG...
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 WORD=PTRSEG(buf:pointer)

   Devuelve el offset de un pointer (offset a la direccion donde apunta!)
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 WORD=PTROFS(buf:pointer)

   Devuelve el segmento de un pointer (segmento a la direccion donde apunta!)
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 INT_MASK_RSGISTER(which:byte)

   Este registro indica cuales interrupts van a estar prendidos o apagados.
   Si el bit es cero, lo activa. (Si es 1, lo apaga)
	ş IRQ 0		Timer (canal 0)
	ş IRQ 1		Teclado
	ş IRQ 2		CGA (??)
	ş IRQ 3		COM2
	ş IRQ 4		COM1
	ş IRQ 5		??
	ş IRQ 6		Diskette
	ş IRQ 7		Printer

    No se donde accesar los IRQ del 8 al 11... Obviamente, si apagas
    el teclado "readkey" y "keyboard" se quedan puy£s.
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 KEY_LEDS(which:byte)

   Activa/Desactiva los LEDs del teclado. Usa 3 bits, que son:
	ş Bit 0		Scroll Lock (Nisiquiera est n en orden).
	ş Bit 1		Num Lock
	ş Bit 2		Caps Lock

   Esta funci¢n es bastante lenta gracias a la porqueria de hardware de
   IBM que no aguanta velocidad. Puede afectar el uso del teclado.
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 TIMER_TICK(freq:word)

   Cambia la frecuencia del reloj del sistema. La f¢rmula es:
	ş 1193180 / freq = Numero de veces por segundo.

   Al salir, la hora se lee del CMOS y la frecuencia se repone para que
   el reloj del sistema vuelva a la normalidad.

   Por ejemplo, para poner el reloj a 70Hz (Hz=ciclos por segundo) tienes
   que usar la formula:

     1193180                Ejemplo:  1193180/18.2 = 65559 (65535)
   ----------- = numero.
       Hz

   Asi que el BIOS usa una frecuencia de 65536. (Valor = 0)
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 SOUND(hz:word)

   Activa un sonido y se queda chillando. Me pregunto si funciona.
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 NOSOUND()

   Apaga cualqier sonido chillando.
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

 WAITKEY()

   Espera que oprimas cualquier tecla y que la sueltes. No vayas a
   apagar el IRQ del teclado antes de llamar a esto..


ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ  TECLADO  ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ


ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
 Variables teclado
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
 ş readkey	: Tiene el scancode. Si el bit 7 est  activo, se solt¢
		  la tecla. (O sea, si es > 127).

 ş keyboard[n]	: Tiene una tabla (basado en scan code) y tiene 0 si la
		  tecla est  suelta y 1 si est  oprimida.

ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
 Tecla especial
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
 ş [Alt]+[SysRq] envia el error #255 y termina la ejecuci¢n.

ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
 Constantes
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
 _space=57; _enter=28; _esc= 1; _tab=15; _crtl=29; _rshift=54;
 _lshift=42; _alt=56; _caps=58; _up = 72; _down=80; _left=75;
 _right=77; _num5=76; _pgup=73; _pgdn=81; _home=71; _end=79;
 _ins=82; _del=83; _back=14;

 _f1=59; _f2=60;  _f3=61;  _f4=62;  _f5=63; _f6=64; _f7=65; _f8=66;
 _f9=67; _f10=68; _f11=87; _f12=88;

 _a=30; _b=48; _c=46; _d=32; _e=18; _f=33; _g=34; _h=35; _i=23; _j=36;
 _k=37; _l=38; _m=50; _n=49; _o=24; _p=25; _q=16; _r=19; _s=31; _t=20;
 _u=22; _v=47; _w=17; _x=45; _y=21; _z=44;

 _1=2; _2=3; _3=4; _4=5; _5=6; _6=7; _7=8; _8=9; _9=10; _0=11;


ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
 Variables "timer"
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
 ş timerw - Valor WORD que incrementa por cada "interrupt" del teclado.
 ş framew - ........

 Ya que son variables, pueden ser borradas sin problemas. Es obvio y
elemental que en un un WORD 65535+1=0


ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
 Scan Codes:
ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
³																																			 ³
³      0      1     2     3     4     5     6     7     8     9
³    ÉÍÍÍÍÍÑÍÍÍÍÍÑÍÍÍÍÍÑÍÍÍÍÍÑÍÍÍÍÍÑÍÍÍÍÍÑÍÍÍÍÍÑÍÍÍÍÍÑÍÍÍÍÍÑÍÍÍÍÍ»
³ 0  º N/A ³ Esc ³  1  ³  2  ³  3  ³  4  ³  5  ³  6  ³  7  ³  8  º
³    ÌÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍ¹
³ 10 º  9  ³  0  ³  -  ³  =  ³Backs³ Tab ³  Q  ³  W  ³  E  ³  R  º
³    ÌÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍ¹
³ 20 º  T  ³  Y  ³  U  ³  I  ³  O  ³  P  ³  [  ³  ]  ³Enter³Cntrlº
³    ÌÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍ¹
³ 30 º  A  ³  S  ³  D  ³  F  ³  G  ³  H  ³  J  ³  K  ³  L  ³  ;  º
³    ÌÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍ¹
³ 40 º  '  ³  `  ³lShif³  \  ³  Z  ³  X  ³  C  ³  V  ³  B  ³  N  º
³    ÌÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍ¹
³ 50 º  M  ³  ,  ³  .  ³  /  ³rShif³PrtSc³ Alt ³Space³Capsl³ F1  º
³    ÌÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍ¹
³ 60 º F2  ³ F3  ³ F4  ³ F5  ³ F6  ³ F7  ³ F8  ³ F9  ³ F10 ³Numlkº
³    ÌÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍ¹
³ 70 ºScrol³ Home³ Up  ³ PgUp³Keyp-³ Left³Keyp5³Right³Keyp+³ End º
³    ÌÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍØÍÍÍÍÍ¹
³ 80 º Down³ PgDn³ Ins ³ Del ³SysRq³     ³     ³ F11 ³ F12 ³     º
³    ÈÍÍÍÍÍÏÍÍÍÍÍÏÍÍÍÍÍÏÍÍÍÍÍÏÍÍÍÍÍÏÍÍÍÍÍÏÍÍÍÍÍÏÍÍÍÍÍÏÍÍÍÍÍÏÍÍÍÍÍ¼
ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
